# https://taskfile.dev

version: '3'

vars:
  PYTHON_VERSION: '3.10.3'

tasks:

  install:
    desc: Install all dependencies
    cmds: 
      - task: install:python
      - task: install:poetry
      - task: install:npm


  install:python:
    desc: Install pyenv & Python v. {{.PYTHON_VERSION}}
    cmds:
      - curl https://pyenv.run | bash
      - pyenv install -v {{.PYTHON_VERSION}}
      - python3 --version

  install:poetry:
    desc: Install poetry
    cmds:
      - curl -sSL https://install.python-poetry.org | python3 -
      - poetry --version

  install:npm:
    desc: Install npm, NodeJS, npx
    cmds:
      - sudo apt update
      - sudo apt install npm
      - npm install -g node
      - npm install -g npx 
      - npm -v
      - node -v
      - npx -v

  infra:
    desc: Spin up infra
    cmds: 
      - echo "Starting docker containers..."
      - docker compose up -d

  infra:down:
    desc: Tear down infra
    cmds: 
      - echo "Stopping docker containers..."
      - docker compose down

  mankkoo:dev:
    desc: Run mankkoo core backend in a dev mode
    dir: services/mankkoo/mankkoo
    cmds:
      - task: infra
      - echo "Starting mankkoo core..."
      - flask run --reload

  mankkoo:test:
    desc: Run tests for mankkoo core
    dir: services/mankkoo
    cmds:
      - echo "Running tests for mankkoo core..."
      - pytest -s -vv --cov=./mankkoo

  update:
    desc: Update dependencies for all services
    cmds:
      - task: mankkoo:update

  mankkoo:update:
    desc: Update dependencies for mankkoo core
    dir: services/mankkoo
    cmds:
      - echo "Updating dependencies for mankkoo core..."
      - poetry update

  mankkoo:req:
    desc: Generate requirements.txt file from Poetry
    dir: services/mankkoo
    cmds:
      - echo "Generate requirements.txt file..."
      - poetry export --without-hashes --format=requirements.txt > requirements.txt

  ui:dev:
    desc: Run mankkoo UI in a dev mode
    dir: services/mankkoo-ui
    cmds:
      - echo "Starting mankkoo UI..."
      - npm start

  test:
    desc: Run all tests
    cmds:
      - task: mankkoo:test

  backup:
    desc: Create PostgreSQL backup
    vars:
      db: mankkoo
    cmds:
      - echo "Starting backuping '{{.db}}' database..."
      - |
        docker exec postgres /bin/bash \
                -c "export PGPASSWORD=postgres \
                && /usr/bin/pg_dump -U postgres {{.db}} -F c -b -v" \
                | gzip -9 > backup/{{.db}}_$(date +"%Y%m%d_%H%M").dump.gz 
      - echo "Backup for '{{.db}}' database completed."
      - ls backup | grep {{.db}}_

  restore:
    desc: Restoring backup data for PostgreSQL
    vars:
      file: mankkoo_20240731_1323
      db: test
    cmds:
      - echo "Starting restoring `{{.db}}` database. Copying backup..."
      - docker cp backup/{{.file}}.dump.gz postgres:{{.file}}.dump.gz
      
      - echo "Unpacking backup..."
      - |
        docker exec postgres /bin/bash \
        -c "gunzip {{.file}}.dump.gz"
      
      - echo "Droping old database and creating a new one..."
      - |
        docker exec postgres /bin/bash \
        -c "export PGPASSWORD=postgres \
        && psql -U postgres -c \"DROP DATABASE IF EXISTS {{.db}} WITH (FORCE);\""
      - |
        docker exec postgres /bin/bash \
        -c "export PGPASSWORD=postgres \
        && psql -U postgres -c \"CREATE DATABASE {{.db}};\""
      
      - echo "Restoring backup..."
      - |
        docker exec postgres /bin/bash \
        -c "export PGPASSWORD=postgres \
        && /usr/bin/pg_restore -U postgres -d {{.db}} -v {{.file}}.dump"
      
      - echo "Backup restored. Cleaning up..."
      - docker exec postgres /bin/bash -c "rm {{.file}}.dump"